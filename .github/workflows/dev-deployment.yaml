name: ManageX-School-Web-Deploy

on:
  push:
    branches:
      - dev
  workflow_dispatch:
 
jobs:  
  build-docker-images:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          repository: 'Greatify/manageX-school-web'
          ref: 'greatify-dev'
          token: ${{ secrets.REPO_DISPATCH_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build PHP Laravel image, tag, and push image to Amazon ECR
        id: build-laravel-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: managex_school
          IMAGE_TAG_LARAVEL: dev-laravel-${{ github.sha }}
        run: |
          echo "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_LARAVEL" > laravel_image_tag.txt
          docker build -f Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_LARAVEL .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_LARAVEL

      - name: Upload image tag files
        uses: actions/upload-artifact@v2
        with:
          name: image-tags
          path: |
            laravel_image_tag.txt
          if-no-files-found: error

  deploy:
    runs-on: ubuntu-latest
    needs: [build-docker-images]
    environment: dev
    steps:
      - uses: actions/checkout@v3
        with:
          repository: 'Greatify/manageX-school-web-deployment'
          ref: 'dev'

      - name: Download image tag files
        uses: actions/download-artifact@v2
        with:
          name: image-tags
          path: .

      - name: Set image tags as environment variables
        run: |
          echo "LARAVEL_IMAGE=$(<laravel_image_tag.txt)" >> $GITHUB_ENV

      - name: Update PHP Laravel deployment image tag
        run: |
          yq -i '.spec.template.spec.containers[0].image = "${{ env.LARAVEL_IMAGE }}"' deployment/dev/dev-school-deploy.yaml

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kube config
        run: aws eks update-kubeconfig --name dev-stg-cluster --region ap-south-1

      - name: Apply PHP Laravel deployment
        run: |
          kubectl apply -f deployment/dev/dev-school-deploy.yaml -n dev-managex-school

      - name: Apply PHP Laravel service
        run: |
          kubectl apply -f deployment/dev/managex-dev-school-service.yaml -n dev-managex-school
          kubectl apply -f deployment/dev/managex-dev-school-ingress.yaml -n dev-managex-school

      - name: Apply Managex Secret-ProviderClass
        run: |
          kubectl apply -f deployment/dev/managex-dev-school-secretprovider.yaml -n dev-managex-school

      # - name: Restart deployments
      #   run: |
      #     kubectl rollout restart deployment managex-school-dev -n dev-managex-school

      - name: Push changes using GitHub App token
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "github-actions@example.com"
          git config --global user.name "greatify-code-merger"
          git add -f deployment/dev/dev-school-deploy.yaml
          git commit -m "Update deployment image"
          git push origin dev
